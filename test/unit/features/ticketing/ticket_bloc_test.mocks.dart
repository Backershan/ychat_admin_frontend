// Mocks generated by Mockito 5.4.6 from annotations
// in y_chat_admin/test/unit/features/ticketing/ticket_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:y_chat_admin/src/features/ticketing/data/models/ticket_api_models.dart'
    as _i6;
import 'package:y_chat_admin/src/features/ticketing/domain/usecases/get_ticket_stats_usecase.dart'
    as _i7;
import 'package:y_chat_admin/src/features/ticketing/domain/usecases/get_tickets_usecase.dart'
    as _i3;
import 'package:y_chat_admin/src/shared/models/failure.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [GetTicketsUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetTicketsUseCase extends _i1.Mock implements _i3.GetTicketsUseCase {
  MockGetTicketsUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.TicketListResponse>> call({
    String? category,
    String? status,
    String? priority,
    String? search,
    String? sortBy,
    String? sortOrder,
    int? page,
    int? limit,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#call, [], {
              #category: category,
              #status: status,
              #priority: priority,
              #search: search,
              #sortBy: sortBy,
              #sortOrder: sortOrder,
              #page: page,
              #limit: limit,
            }),
            returnValue:
                _i4.Future<
                  _i2.Either<_i5.Failure, _i6.TicketListResponse>
                >.value(
                  _FakeEither_0<_i5.Failure, _i6.TicketListResponse>(
                    this,
                    Invocation.method(#call, [], {
                      #category: category,
                      #status: status,
                      #priority: priority,
                      #search: search,
                      #sortBy: sortBy,
                      #sortOrder: sortOrder,
                      #page: page,
                      #limit: limit,
                    }),
                  ),
                ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, _i6.TicketListResponse>>);
}

/// A class which mocks [GetTicketStatsUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetTicketStatsUseCase extends _i1.Mock
    implements _i7.GetTicketStatsUseCase {
  MockGetTicketStatsUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.TicketStatsResponse>> call() =>
      (super.noSuchMethod(
            Invocation.method(#call, []),
            returnValue:
                _i4.Future<
                  _i2.Either<_i5.Failure, _i6.TicketStatsResponse>
                >.value(
                  _FakeEither_0<_i5.Failure, _i6.TicketStatsResponse>(
                    this,
                    Invocation.method(#call, []),
                  ),
                ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, _i6.TicketStatsResponse>>);
}
