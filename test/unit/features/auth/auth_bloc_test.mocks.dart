// Mocks generated by Mockito 5.4.6 from annotations
// in y_chat_admin/test/unit/features/auth/auth_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:y_chat_admin/src/core/services/auth_service.dart' as _i13;
import 'package:y_chat_admin/src/features/auth/domain/entities/auth_entity.dart'
    as _i12;
import 'package:y_chat_admin/src/features/auth/domain/entities/login_response_entity.dart'
    as _i6;
import 'package:y_chat_admin/src/features/auth/domain/entities/super_admin_response_entity.dart'
    as _i9;
import 'package:y_chat_admin/src/features/auth/domain/entities/user_entity.dart'
    as _i11;
import 'package:y_chat_admin/src/features/auth/domain/repositories/auth_repository.dart'
    as _i10;
import 'package:y_chat_admin/src/features/auth/domain/usecases/login_usecase.dart'
    as _i3;
import 'package:y_chat_admin/src/features/auth/domain/usecases/register_super_admin_usecase.dart'
    as _i8;
import 'package:y_chat_admin/src/features/auth/domain/usecases/register_usecase.dart'
    as _i7;
import 'package:y_chat_admin/src/shared/models/failure.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [LoginUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockLoginUseCase extends _i1.Mock implements _i3.LoginUseCase {
  MockLoginUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.LoginResponseEntity>> call({
    required String? email,
    required String? password,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#call, [], {#email: email, #password: password}),
            returnValue:
                _i4.Future<
                  _i2.Either<_i5.Failure, _i6.LoginResponseEntity>
                >.value(
                  _FakeEither_0<_i5.Failure, _i6.LoginResponseEntity>(
                    this,
                    Invocation.method(#call, [], {
                      #email: email,
                      #password: password,
                    }),
                  ),
                ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, _i6.LoginResponseEntity>>);
}

/// A class which mocks [RegisterUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockRegisterUseCase extends _i1.Mock implements _i7.RegisterUseCase {
  MockRegisterUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.LoginResponseEntity>> call({
    required String? email,
    required String? password,
    required String? confirmPassword,
    required String? firstName,
    required String? lastName,
    bool? role = false,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#call, [], {
              #email: email,
              #password: password,
              #confirmPassword: confirmPassword,
              #firstName: firstName,
              #lastName: lastName,
              #role: role,
            }),
            returnValue:
                _i4.Future<
                  _i2.Either<_i5.Failure, _i6.LoginResponseEntity>
                >.value(
                  _FakeEither_0<_i5.Failure, _i6.LoginResponseEntity>(
                    this,
                    Invocation.method(#call, [], {
                      #email: email,
                      #password: password,
                      #confirmPassword: confirmPassword,
                      #firstName: firstName,
                      #lastName: lastName,
                      #role: role,
                    }),
                  ),
                ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, _i6.LoginResponseEntity>>);
}

/// A class which mocks [RegisterSuperAdminUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockRegisterSuperAdminUseCase extends _i1.Mock
    implements _i8.RegisterSuperAdminUseCase {
  MockRegisterSuperAdminUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i9.SuperAdminResponseEntity>> call({
    String? firstName,
    String? lastName,
    required String? email,
    required String? password,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#call, [], {
              #firstName: firstName,
              #lastName: lastName,
              #email: email,
              #password: password,
            }),
            returnValue:
                _i4.Future<
                  _i2.Either<_i5.Failure, _i9.SuperAdminResponseEntity>
                >.value(
                  _FakeEither_0<_i5.Failure, _i9.SuperAdminResponseEntity>(
                    this,
                    Invocation.method(#call, [], {
                      #firstName: firstName,
                      #lastName: lastName,
                      #email: email,
                      #password: password,
                    }),
                  ),
                ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, _i9.SuperAdminResponseEntity>>);
}

/// A class which mocks [AuthRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthRepository extends _i1.Mock implements _i10.AuthRepository {
  MockAuthRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.LoginResponseEntity>> login({
    required String? email,
    required String? password,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#login, [], {#email: email, #password: password}),
            returnValue:
                _i4.Future<
                  _i2.Either<_i5.Failure, _i6.LoginResponseEntity>
                >.value(
                  _FakeEither_0<_i5.Failure, _i6.LoginResponseEntity>(
                    this,
                    Invocation.method(#login, [], {
                      #email: email,
                      #password: password,
                    }),
                  ),
                ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, _i6.LoginResponseEntity>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.LoginResponseEntity>> register({
    required String? email,
    required String? password,
    required String? firstName,
    required String? lastName,
    bool? role = false,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#register, [], {
              #email: email,
              #password: password,
              #firstName: firstName,
              #lastName: lastName,
              #role: role,
            }),
            returnValue:
                _i4.Future<
                  _i2.Either<_i5.Failure, _i6.LoginResponseEntity>
                >.value(
                  _FakeEither_0<_i5.Failure, _i6.LoginResponseEntity>(
                    this,
                    Invocation.method(#register, [], {
                      #email: email,
                      #password: password,
                      #firstName: firstName,
                      #lastName: lastName,
                      #role: role,
                    }),
                  ),
                ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, _i6.LoginResponseEntity>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.LoginResponseEntity>> createAdminUser({
    required String? username,
    required String? email,
    required String? password,
    required String? firstName,
    required String? lastName,
    String? phoneNumber,
    String? department,
    String? position,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#createAdminUser, [], {
              #username: username,
              #email: email,
              #password: password,
              #firstName: firstName,
              #lastName: lastName,
              #phoneNumber: phoneNumber,
              #department: department,
              #position: position,
            }),
            returnValue:
                _i4.Future<
                  _i2.Either<_i5.Failure, _i6.LoginResponseEntity>
                >.value(
                  _FakeEither_0<_i5.Failure, _i6.LoginResponseEntity>(
                    this,
                    Invocation.method(#createAdminUser, [], {
                      #username: username,
                      #email: email,
                      #password: password,
                      #firstName: firstName,
                      #lastName: lastName,
                      #phoneNumber: phoneNumber,
                      #department: department,
                      #position: position,
                    }),
                  ),
                ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, _i6.LoginResponseEntity>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, void>> logout() =>
      (super.noSuchMethod(
            Invocation.method(#logout, []),
            returnValue: _i4.Future<_i2.Either<_i5.Failure, void>>.value(
              _FakeEither_0<_i5.Failure, void>(
                this,
                Invocation.method(#logout, []),
              ),
            ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, void>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, bool>> isAuthenticated() =>
      (super.noSuchMethod(
            Invocation.method(#isAuthenticated, []),
            returnValue: _i4.Future<_i2.Either<_i5.Failure, bool>>.value(
              _FakeEither_0<_i5.Failure, bool>(
                this,
                Invocation.method(#isAuthenticated, []),
              ),
            ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, bool>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i11.UserEntity>> getCurrentUser() =>
      (super.noSuchMethod(
            Invocation.method(#getCurrentUser, []),
            returnValue:
                _i4.Future<_i2.Either<_i5.Failure, _i11.UserEntity>>.value(
                  _FakeEither_0<_i5.Failure, _i11.UserEntity>(
                    this,
                    Invocation.method(#getCurrentUser, []),
                  ),
                ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, _i11.UserEntity>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i12.AuthEntity>> refreshToken() =>
      (super.noSuchMethod(
            Invocation.method(#refreshToken, []),
            returnValue:
                _i4.Future<_i2.Either<_i5.Failure, _i12.AuthEntity>>.value(
                  _FakeEither_0<_i5.Failure, _i12.AuthEntity>(
                    this,
                    Invocation.method(#refreshToken, []),
                  ),
                ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, _i12.AuthEntity>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, void>> changePassword({
    required String? currentPassword,
    required String? newPassword,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#changePassword, [], {
              #currentPassword: currentPassword,
              #newPassword: newPassword,
            }),
            returnValue: _i4.Future<_i2.Either<_i5.Failure, void>>.value(
              _FakeEither_0<_i5.Failure, void>(
                this,
                Invocation.method(#changePassword, [], {
                  #currentPassword: currentPassword,
                  #newPassword: newPassword,
                }),
              ),
            ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, void>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, void>> updateProfile({
    String? firstName,
    String? lastName,
    String? phoneNumber,
    String? department,
    String? position,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#updateProfile, [], {
              #firstName: firstName,
              #lastName: lastName,
              #phoneNumber: phoneNumber,
              #department: department,
              #position: position,
            }),
            returnValue: _i4.Future<_i2.Either<_i5.Failure, void>>.value(
              _FakeEither_0<_i5.Failure, void>(
                this,
                Invocation.method(#updateProfile, [], {
                  #firstName: firstName,
                  #lastName: lastName,
                  #phoneNumber: phoneNumber,
                  #department: department,
                  #position: position,
                }),
              ),
            ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, void>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i9.SuperAdminResponseEntity>>
  registerSuperAdmin({
    String? firstName,
    String? lastName,
    required String? email,
    required String? password,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#registerSuperAdmin, [], {
              #firstName: firstName,
              #lastName: lastName,
              #email: email,
              #password: password,
            }),
            returnValue:
                _i4.Future<
                  _i2.Either<_i5.Failure, _i9.SuperAdminResponseEntity>
                >.value(
                  _FakeEither_0<_i5.Failure, _i9.SuperAdminResponseEntity>(
                    this,
                    Invocation.method(#registerSuperAdmin, [], {
                      #firstName: firstName,
                      #lastName: lastName,
                      #email: email,
                      #password: password,
                    }),
                  ),
                ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, _i9.SuperAdminResponseEntity>>);
}

/// A class which mocks [AuthService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthService extends _i1.Mock implements _i13.AuthService {
  MockAuthService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Stream<_i13.AuthServiceState> get authStateStream =>
      (super.noSuchMethod(
            Invocation.getter(#authStateStream),
            returnValue: _i4.Stream<_i13.AuthServiceState>.empty(),
          )
          as _i4.Stream<_i13.AuthServiceState>);

  @override
  _i13.AuthServiceState get currentAuthState =>
      (super.noSuchMethod(
            Invocation.getter(#currentAuthState),
            returnValue: _i13.AuthServiceState.unauthenticated,
          )
          as _i13.AuthServiceState);

  @override
  bool get isAuthenticated =>
      (super.noSuchMethod(
            Invocation.getter(#isAuthenticated),
            returnValue: false,
          )
          as bool);

  @override
  bool get isAccessTokenExpired =>
      (super.noSuchMethod(
            Invocation.getter(#isAccessTokenExpired),
            returnValue: false,
          )
          as bool);

  @override
  bool get isRefreshTokenExpired =>
      (super.noSuchMethod(
            Invocation.getter(#isRefreshTokenExpired),
            returnValue: false,
          )
          as bool);

  @override
  _i4.Future<void> saveAuthData(_i12.AuthEntity? authEntity) =>
      (super.noSuchMethod(
            Invocation.method(#saveAuthData, [authEntity]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> updateAccessToken(String? newToken, DateTime? newExpiry) =>
      (super.noSuchMethod(
            Invocation.method(#updateAccessToken, [newToken, newExpiry]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> updateTokens(
    String? accessToken,
    String? refreshToken,
    DateTime? expiry,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#updateTokens, [
              accessToken,
              refreshToken,
              expiry,
            ]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> logout() =>
      (super.noSuchMethod(
            Invocation.method(#logout, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );
}
